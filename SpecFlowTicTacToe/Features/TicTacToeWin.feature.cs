// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTicTacToe.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TicTacToeWinFeature : object, Xunit.IClassFixture<TicTacToeWinFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TicTacToeWin.feature"
#line hidden
        
        public TicTacToeWinFeature(TicTacToeWinFeature.FixtureData fixtureData, SpecFlowTicTacToe_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "TicTacToeWin", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player X wins Horizontal starting at cell 0")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player X wins Horizontal starting at cell 0")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerXWinsHorizontalStartingAtCell0()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X wins Horizontal starting at cell 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "X",
                            ""});
                table27.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table27.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 5
        testRunner.Given("the board:", ((string)(null)), table27, "Given ");
#line hidden
#line 9
        testRunner.When("player X plays in cell 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
        testRunner.Then("the player X wins Horizontal starting at cell 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player X wins Horizontal starting at cell 3")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player X wins Horizontal starting at cell 3")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerXWinsHorizontalStartingAtCell3()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X wins Horizontal starting at cell 3", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 13
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            ""});
                table28.AddRow(new string[] {
                            "X",
                            "X",
                            ""});
                table28.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 14
        testRunner.Given("the board:", ((string)(null)), table28, "Given ");
#line hidden
#line 18
        testRunner.When("player X plays in cell 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
        testRunner.Then("the player X wins Horizontal starting at cell 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player X wins Horizontal starting at cell 6")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player X wins Horizontal starting at cell 6")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerXWinsHorizontalStartingAtCell6()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X wins Horizontal starting at cell 6", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            ""});
                table29.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table29.AddRow(new string[] {
                            "X",
                            "X",
                            ""});
#line 23
        testRunner.Given("the board:", ((string)(null)), table29, "Given ");
#line hidden
#line 27
        testRunner.When("player X plays in cell 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
        testRunner.Then("the player X wins Horizontal starting at cell 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player X wins Vertical starting at cell 0")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player X wins Vertical starting at cell 0")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerXWinsVerticalStartingAtCell0()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X wins Vertical starting at cell 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "",
                            ""});
                table30.AddRow(new string[] {
                            "X",
                            "",
                            ""});
                table30.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 32
        testRunner.Given("the board:", ((string)(null)), table30, "Given ");
#line hidden
#line 36
        testRunner.When("player X plays in cell 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
        testRunner.Then("the player X wins Vertical starting at cell 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player X wins Vertical starting at cell 1")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player X wins Vertical starting at cell 1")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerXWinsVerticalStartingAtCell1()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X wins Vertical starting at cell 1", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 40
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "X",
                            ""});
                table31.AddRow(new string[] {
                            "",
                            "X",
                            ""});
                table31.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 41
        testRunner.Given("the board:", ((string)(null)), table31, "Given ");
#line hidden
#line 45
        testRunner.When("player X plays in cell 7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
        testRunner.Then("the player X wins Vertical starting at cell 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player X wins Vertical starting at cell 2")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player X wins Vertical starting at cell 2")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerXWinsVerticalStartingAtCell2()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X wins Vertical starting at cell 2", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "X"});
                table32.AddRow(new string[] {
                            "",
                            "",
                            "X"});
                table32.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 50
        testRunner.Given("the board:", ((string)(null)), table32, "Given ");
#line hidden
#line 54
        testRunner.When("player X plays in cell 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
        testRunner.Then("the player X wins Vertical starting at cell 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player X wins Diagonal starting at cell 0")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player X wins Diagonal starting at cell 0")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerXWinsDiagonalStartingAtCell0()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X wins Diagonal starting at cell 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 58
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "",
                            ""});
                table33.AddRow(new string[] {
                            "",
                            "X",
                            ""});
                table33.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 59
        testRunner.Given("the board:", ((string)(null)), table33, "Given ");
#line hidden
#line 63
        testRunner.When("player X plays in cell 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
        testRunner.Then("the player X wins Diagonal starting at cell 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player X wins Diagonal starting at cell 2")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player X wins Diagonal starting at cell 2")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerXWinsDiagonalStartingAtCell2()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X wins Diagonal starting at cell 2", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "X"});
                table34.AddRow(new string[] {
                            "",
                            "X",
                            ""});
                table34.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 68
        testRunner.Given("the board:", ((string)(null)), table34, "Given ");
#line hidden
#line 72
        testRunner.When("player X plays in cell 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
        testRunner.Then("the player X wins AntiDiagonal starting at cell 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player O wins Horizontal starting at cell 0")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player O wins Horizontal starting at cell 0")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerOWinsHorizontalStartingAtCell0()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O wins Horizontal starting at cell 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 76
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "O",
                            "O",
                            ""});
                table35.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table35.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 77
        testRunner.Given("the board:", ((string)(null)), table35, "Given ");
#line hidden
#line 81
        testRunner.When("player O plays in cell 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
        testRunner.Then("the player O wins Horizontal starting at cell 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player O wins Horizontal starting at cell 3")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player O wins Horizontal starting at cell 3")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerOWinsHorizontalStartingAtCell3()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O wins Horizontal starting at cell 3", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 85
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            ""});
                table36.AddRow(new string[] {
                            "O",
                            "O",
                            ""});
                table36.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 86
        testRunner.Given("the board:", ((string)(null)), table36, "Given ");
#line hidden
#line 90
        testRunner.When("player O plays in cell 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
        testRunner.Then("the player O wins Horizontal starting at cell 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player O wins Horizontal starting at cell 6")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player O wins Horizontal starting at cell 6")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerOWinsHorizontalStartingAtCell6()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O wins Horizontal starting at cell 6", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 94
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            ""});
                table37.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table37.AddRow(new string[] {
                            "O",
                            "O",
                            ""});
#line 95
        testRunner.Given("the board:", ((string)(null)), table37, "Given ");
#line hidden
#line 99
        testRunner.When("player O plays in cell 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
        testRunner.Then("the player O wins Horizontal starting at cell 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player O wins Vertical starting at cell 0")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player O wins Vertical starting at cell 0")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerOWinsVerticalStartingAtCell0()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O wins Vertical starting at cell 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 103
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "O",
                            "",
                            ""});
                table38.AddRow(new string[] {
                            "O",
                            "",
                            ""});
                table38.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 104
        testRunner.Given("the board:", ((string)(null)), table38, "Given ");
#line hidden
#line 108
        testRunner.When("player O plays in cell 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
        testRunner.Then("the player O wins Vertical starting at cell 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player O wins Vertical starting at cell 1")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player O wins Vertical starting at cell 1")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerOWinsVerticalStartingAtCell1()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O wins Vertical starting at cell 1", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "O",
                            ""});
                table39.AddRow(new string[] {
                            "",
                            "O",
                            ""});
                table39.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 113
        testRunner.Given("the board:", ((string)(null)), table39, "Given ");
#line hidden
#line 117
        testRunner.When("player O plays in cell 7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
        testRunner.Then("the player O wins Vertical starting at cell 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player O wins Vertical starting at cell 2")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player O wins Vertical starting at cell 2")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerOWinsVerticalStartingAtCell2()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O wins Vertical starting at cell 2", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 121
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "O"});
                table40.AddRow(new string[] {
                            "",
                            "",
                            "O"});
                table40.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 122
        testRunner.Given("the board:", ((string)(null)), table40, "Given ");
#line hidden
#line 126
        testRunner.When("player O plays in cell 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 127
        testRunner.Then("the player O wins Vertical starting at cell 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player O wins Diagonal starting at cell 0")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player O wins Diagonal starting at cell 0")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerOWinsDiagonalStartingAtCell0()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O wins Diagonal starting at cell 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 130
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "O",
                            "",
                            ""});
                table41.AddRow(new string[] {
                            "",
                            "O",
                            ""});
                table41.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 131
        testRunner.Given("the board:", ((string)(null)), table41, "Given ");
#line hidden
#line 135
        testRunner.When("player O plays in cell 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 136
        testRunner.Then("the player O wins Diagonal starting at cell 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player O wins Diagonal starting at cell 2")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "Player O wins Diagonal starting at cell 2")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerOWinsDiagonalStartingAtCell2()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O wins Diagonal starting at cell 2", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 139
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "O"});
                table42.AddRow(new string[] {
                            "",
                            "O",
                            ""});
                table42.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 140
        testRunner.Given("the board:", ((string)(null)), table42, "Given ");
#line hidden
#line 144
        testRunner.When("player O plays in cell 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 145
        testRunner.Then("the player O wins AntiDiagonal starting at cell 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No player wins")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToeWin")]
        [Xunit.TraitAttribute("Description", "No player wins")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void NoPlayerWins()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No player wins", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 148
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "O",
                            "X"});
                table43.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table43.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 149
        testRunner.Given("the board:", ((string)(null)), table43, "Given ");
#line hidden
#line 153
        testRunner.When("player X plays in cell 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 154
        testRunner.Then("no player wins", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TicTacToeWinFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TicTacToeWinFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
