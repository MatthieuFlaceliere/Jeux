// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTicTacToe.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TicTacToePlayFeature : object, Xunit.IClassFixture<TicTacToePlayFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TicTacToePlay.feature"
#line hidden
        
        public TicTacToePlayFeature(TicTacToePlayFeature.FixtureData fixtureData, SpecFlowTicTacToe_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "TicTacToe play", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player X plays")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToe play")]
        [Xunit.TraitAttribute("Description", "Player X plays")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerXPlays()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X plays", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            ""});
                table4.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table4.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 5
        testRunner.Given("the board:", ((string)(null)), table4, "Given ");
#line hidden
#line 9
        testRunner.When("player X plays in cell 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 10
        testRunner.Then("the board should be:", ((string)(null)), table5, "Then ");
#line hidden
#line 14
        testRunner.When("player X plays in cell 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "X",
                            ""});
                table6.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table6.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 15
        testRunner.Then("the board should be:", ((string)(null)), table6, "Then ");
#line hidden
#line 19
        testRunner.When("player X plays in cell 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "X",
                            "X"});
                table7.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table7.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 20
        testRunner.Then("the board should be:", ((string)(null)), table7, "Then ");
#line hidden
#line 24
        testRunner.When("player X plays in cell 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "X",
                            "X"});
                table8.AddRow(new string[] {
                            "X",
                            "",
                            ""});
                table8.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 25
        testRunner.Then("the board should be:", ((string)(null)), table8, "Then ");
#line hidden
#line 29
        testRunner.When("player X plays in cell 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "X",
                            "X"});
                table9.AddRow(new string[] {
                            "X",
                            "X",
                            ""});
                table9.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 30
        testRunner.Then("the board should be:", ((string)(null)), table9, "Then ");
#line hidden
#line 34
        testRunner.When("player X plays in cell 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "X",
                            "X"});
                table10.AddRow(new string[] {
                            "X",
                            "X",
                            "X"});
                table10.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 35
        testRunner.Then("the board should be:", ((string)(null)), table10, "Then ");
#line hidden
#line 39
        testRunner.When("player X plays in cell 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "X",
                            "X"});
                table11.AddRow(new string[] {
                            "X",
                            "X",
                            "X"});
                table11.AddRow(new string[] {
                            "X",
                            "",
                            ""});
#line 40
        testRunner.Then("the board should be:", ((string)(null)), table11, "Then ");
#line hidden
#line 44
        testRunner.When("player X plays in cell 7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "X",
                            "X"});
                table12.AddRow(new string[] {
                            "X",
                            "X",
                            "X"});
                table12.AddRow(new string[] {
                            "X",
                            "X",
                            ""});
#line 45
        testRunner.Then("the board should be:", ((string)(null)), table12, "Then ");
#line hidden
#line 49
        testRunner.When("player X plays in cell 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "X",
                            "X"});
                table13.AddRow(new string[] {
                            "X",
                            "X",
                            "X"});
                table13.AddRow(new string[] {
                            "X",
                            "X",
                            "X"});
#line 50
        testRunner.Then("the board should be:", ((string)(null)), table13, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player O plays")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToe play")]
        [Xunit.TraitAttribute("Description", "Player O plays")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayerOPlays()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O plays", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            ""});
                table14.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table14.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 57
        testRunner.Given("the board:", ((string)(null)), table14, "Given ");
#line hidden
#line 61
        testRunner.When("player O plays in cell 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "O",
                            "",
                            ""});
                table15.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table15.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 62
        testRunner.Then("the board should be:", ((string)(null)), table15, "Then ");
#line hidden
#line 66
        testRunner.When("player O plays in cell 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "O",
                            "O",
                            ""});
                table16.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table16.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 67
        testRunner.Then("the board should be:", ((string)(null)), table16, "Then ");
#line hidden
#line 71
        testRunner.When("player O plays in cell 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "O",
                            "O",
                            "O"});
                table17.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table17.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 72
        testRunner.Then("the board should be:", ((string)(null)), table17, "Then ");
#line hidden
#line 76
        testRunner.When("player O plays in cell 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "O",
                            "O",
                            "O"});
                table18.AddRow(new string[] {
                            "O",
                            "",
                            ""});
                table18.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 77
        testRunner.Then("the board should be:", ((string)(null)), table18, "Then ");
#line hidden
#line 81
        testRunner.When("player O plays in cell 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "O",
                            "O",
                            "O"});
                table19.AddRow(new string[] {
                            "O",
                            "O",
                            ""});
                table19.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 82
        testRunner.Then("the board should be:", ((string)(null)), table19, "Then ");
#line hidden
#line 86
        testRunner.When("player O plays in cell 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "O",
                            "O",
                            "O"});
                table20.AddRow(new string[] {
                            "O",
                            "O",
                            "O"});
                table20.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 87
        testRunner.Then("the board should be:", ((string)(null)), table20, "Then ");
#line hidden
#line 91
        testRunner.When("player O plays in cell 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "O",
                            "O",
                            "O"});
                table21.AddRow(new string[] {
                            "O",
                            "O",
                            "O"});
                table21.AddRow(new string[] {
                            "O",
                            "",
                            ""});
#line 92
        testRunner.Then("the board should be:", ((string)(null)), table21, "Then ");
#line hidden
#line 96
        testRunner.When("player O plays in cell 7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "O",
                            "O",
                            "O"});
                table22.AddRow(new string[] {
                            "O",
                            "O",
                            "O"});
                table22.AddRow(new string[] {
                            "O",
                            "O",
                            ""});
#line 97
        testRunner.Then("the board should be:", ((string)(null)), table22, "Then ");
#line hidden
#line 101
        testRunner.When("player O plays in cell 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "O",
                            "O",
                            "O"});
                table23.AddRow(new string[] {
                            "O",
                            "O",
                            "O"});
                table23.AddRow(new string[] {
                            "O",
                            "O",
                            "O"});
#line 102
        testRunner.Then("the board should be:", ((string)(null)), table23, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Players try to play in not empty cell")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToe play")]
        [Xunit.TraitAttribute("Description", "Players try to play in not empty cell")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayersTryToPlayInNotEmptyCell()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Players try to play in not empty cell", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 108
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "",
                            ""});
                table24.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table24.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 109
        testRunner.Given("the board:", ((string)(null)), table24, "Given ");
#line hidden
#line 113
        testRunner.When("player X plays in cell 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
        testRunner.Then("error message should be: \"Cell is already taken\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 115
        testRunner.When("player O plays in cell 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
        testRunner.Then("error message should be: \"Cell is already taken\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Players try to play out of the board")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToe play")]
        [Xunit.TraitAttribute("Description", "Players try to play out of the board")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void PlayersTryToPlayOutOfTheBoard()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Players try to play out of the board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 119
        this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            ""});
                table25.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table25.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 120
            testRunner.Given("the board:", ((string)(null)), table25, "Given ");
#line hidden
#line 124
            testRunner.When("player O plays in cell 9", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 125
            testRunner.Then("error message should be: \"Cell is out of the board\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
            testRunner.When("player O plays in cell -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 127
            testRunner.Then("error message should be: \"Cell is out of the board\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
            testRunner.When("player X plays in cell 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
            testRunner.Then("error message should be: \"Cell is out of the board\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Change current player after each move")]
        [Xunit.TraitAttribute("FeatureTitle", "TicTacToe play")]
        [Xunit.TraitAttribute("Description", "Change current player after each move")]
        [Xunit.TraitAttribute("Category", "TicTacToe")]
        public virtual void ChangeCurrentPlayerAfterEachMove()
        {
            string[] tagsOfScenario = new string[] {
                    "TicTacToe"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change current player after each move", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 132
            this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            ""});
                table26.AddRow(new string[] {
                            "",
                            "",
                            ""});
                table26.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 133
                testRunner.Given("the board:", ((string)(null)), table26, "Given ");
#line hidden
#line 137
                testRunner.When("player X plays in cell 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
                testRunner.Then("current player should be: O", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
                testRunner.When("player O plays in cell 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
                testRunner.Then("current player should be: X", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TicTacToePlayFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TicTacToePlayFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
